// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/pdfio.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class PdfioBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  PdfioBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  PdfioBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// Functions...
  int pdfioArrayAppendArray(
    ffi.Pointer<pdfio_array_t> a,
    ffi.Pointer<pdfio_array_t> value,
  ) {
    return _pdfioArrayAppendArray(
      a,
      value,
    );
  }

  late final _pdfioArrayAppendArrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pdfio_array_t>,
              ffi.Pointer<pdfio_array_t>)>>('pdfioArrayAppendArray');
  late final _pdfioArrayAppendArray = _pdfioArrayAppendArrayPtr.asFunction<
      int Function(ffi.Pointer<pdfio_array_t>, ffi.Pointer<pdfio_array_t>)>();

  int pdfioArrayAppendBinary(
    ffi.Pointer<pdfio_array_t> a,
    ffi.Pointer<ffi.UnsignedChar> value,
    int valuelen,
  ) {
    return _pdfioArrayAppendBinary(
      a,
      value,
      valuelen,
    );
  }

  late final _pdfioArrayAppendBinaryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pdfio_array_t>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('pdfioArrayAppendBinary');
  late final _pdfioArrayAppendBinary = _pdfioArrayAppendBinaryPtr.asFunction<
      int Function(
          ffi.Pointer<pdfio_array_t>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int pdfioArrayAppendBoolean(
    ffi.Pointer<pdfio_array_t> a,
    ffi.Pointer<bool> value,
  ) {
    return _pdfioArrayAppendBoolean(
      a,
      value,
    );
  }

  late final _pdfioArrayAppendBooleanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pdfio_array_t>,
              ffi.Pointer<bool>)>>('pdfioArrayAppendBoolean');
  late final _pdfioArrayAppendBoolean = _pdfioArrayAppendBooleanPtr.asFunction<
      int Function(ffi.Pointer<pdfio_array_t>, ffi.Pointer<bool>)>();

  int pdfioArrayAppendDate(
    ffi.Pointer<pdfio_array_t> a,
    int value,
  ) {
    return _pdfioArrayAppendDate(
      a,
      value,
    );
  }

  late final _pdfioArrayAppendDatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pdfio_array_t>, time_t)>>('pdfioArrayAppendDate');
  late final _pdfioArrayAppendDate = _pdfioArrayAppendDatePtr
      .asFunction<int Function(ffi.Pointer<pdfio_array_t>, int)>();

  int pdfioArrayAppendDict(
    ffi.Pointer<pdfio_array_t> a,
    ffi.Pointer<pdfio_dict_t> value,
  ) {
    return _pdfioArrayAppendDict(
      a,
      value,
    );
  }

  late final _pdfioArrayAppendDictPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pdfio_array_t>,
              ffi.Pointer<pdfio_dict_t>)>>('pdfioArrayAppendDict');
  late final _pdfioArrayAppendDict = _pdfioArrayAppendDictPtr.asFunction<
      int Function(ffi.Pointer<pdfio_array_t>, ffi.Pointer<pdfio_dict_t>)>();

  int pdfioArrayAppendName(
    ffi.Pointer<pdfio_array_t> a,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _pdfioArrayAppendName(
      a,
      value,
    );
  }

  late final _pdfioArrayAppendNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pdfio_array_t>,
              ffi.Pointer<ffi.Char>)>>('pdfioArrayAppendName');
  late final _pdfioArrayAppendName = _pdfioArrayAppendNamePtr.asFunction<
      int Function(ffi.Pointer<pdfio_array_t>, ffi.Pointer<ffi.Char>)>();

  int pdfioArrayAppendNumber(
    ffi.Pointer<pdfio_array_t> a,
    double value,
  ) {
    return _pdfioArrayAppendNumber(
      a,
      value,
    );
  }

  late final _pdfioArrayAppendNumberPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pdfio_array_t>,
              ffi.Double)>>('pdfioArrayAppendNumber');
  late final _pdfioArrayAppendNumber = _pdfioArrayAppendNumberPtr
      .asFunction<int Function(ffi.Pointer<pdfio_array_t>, double)>();

  int pdfioArrayAppendObj(
    ffi.Pointer<pdfio_array_t> a,
    ffi.Pointer<pdfio_obj_t> value,
  ) {
    return _pdfioArrayAppendObj(
      a,
      value,
    );
  }

  late final _pdfioArrayAppendObjPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pdfio_array_t>,
              ffi.Pointer<pdfio_obj_t>)>>('pdfioArrayAppendObj');
  late final _pdfioArrayAppendObj = _pdfioArrayAppendObjPtr.asFunction<
      int Function(ffi.Pointer<pdfio_array_t>, ffi.Pointer<pdfio_obj_t>)>();

  int pdfioArrayAppendString(
    ffi.Pointer<pdfio_array_t> a,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _pdfioArrayAppendString(
      a,
      value,
    );
  }

  late final _pdfioArrayAppendStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pdfio_array_t>,
              ffi.Pointer<ffi.Char>)>>('pdfioArrayAppendString');
  late final _pdfioArrayAppendString = _pdfioArrayAppendStringPtr.asFunction<
      int Function(ffi.Pointer<pdfio_array_t>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<pdfio_array_t> pdfioArrayCopy(
    ffi.Pointer<pdfio_file_t> pdf,
    ffi.Pointer<pdfio_array_t> a,
  ) {
    return _pdfioArrayCopy(
      pdf,
      a,
    );
  }

  late final _pdfioArrayCopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pdfio_array_t> Function(ffi.Pointer<pdfio_file_t>,
              ffi.Pointer<pdfio_array_t>)>>('pdfioArrayCopy');
  late final _pdfioArrayCopy = _pdfioArrayCopyPtr.asFunction<
      ffi.Pointer<pdfio_array_t> Function(
          ffi.Pointer<pdfio_file_t>, ffi.Pointer<pdfio_array_t>)>();

  ffi.Pointer<pdfio_array_t> pdfioArrayCreate(
    ffi.Pointer<pdfio_file_t> pdf,
  ) {
    return _pdfioArrayCreate(
      pdf,
    );
  }

  late final _pdfioArrayCreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pdfio_array_t> Function(
              ffi.Pointer<pdfio_file_t>)>>('pdfioArrayCreate');
  late final _pdfioArrayCreate = _pdfioArrayCreatePtr.asFunction<
      ffi.Pointer<pdfio_array_t> Function(ffi.Pointer<pdfio_file_t>)>();

  ffi.Pointer<pdfio_array_t> pdfioArrayGetArray(
    ffi.Pointer<pdfio_array_t> a,
    int n,
  ) {
    return _pdfioArrayGetArray(
      a,
      n,
    );
  }

  late final _pdfioArrayGetArrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pdfio_array_t> Function(
              ffi.Pointer<pdfio_array_t>, ffi.Int)>>('pdfioArrayGetArray');
  late final _pdfioArrayGetArray = _pdfioArrayGetArrayPtr.asFunction<
      ffi.Pointer<pdfio_array_t> Function(ffi.Pointer<pdfio_array_t>, int)>();

  ffi.Pointer<ffi.UnsignedChar> pdfioArrayGetBinary(
    ffi.Pointer<pdfio_array_t> a,
    int n,
    ffi.Pointer<ffi.Int> length,
  ) {
    return _pdfioArrayGetBinary(
      a,
      n,
      length,
    );
  }

  late final _pdfioArrayGetBinaryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<pdfio_array_t>,
              ffi.Int, ffi.Pointer<ffi.Int>)>>('pdfioArrayGetBinary');
  late final _pdfioArrayGetBinary = _pdfioArrayGetBinaryPtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(
          ffi.Pointer<pdfio_array_t>, int, ffi.Pointer<ffi.Int>)>();

  int pdfioArrayGetBoolean(
    ffi.Pointer<pdfio_array_t> a,
    int n,
  ) {
    return _pdfioArrayGetBoolean(
      a,
      n,
    );
  }

  late final _pdfioArrayGetBooleanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pdfio_array_t>, ffi.Int)>>('pdfioArrayGetBoolean');
  late final _pdfioArrayGetBoolean = _pdfioArrayGetBooleanPtr
      .asFunction<int Function(ffi.Pointer<pdfio_array_t>, int)>();

  int pdfioArrayGetDate(
    ffi.Pointer<pdfio_array_t> a,
    int n,
  ) {
    return _pdfioArrayGetDate(
      a,
      n,
    );
  }

  late final _pdfioArrayGetDatePtr = _lookup<
      ffi.NativeFunction<
          time_t Function(
              ffi.Pointer<pdfio_array_t>, ffi.Int)>>('pdfioArrayGetDate');
  late final _pdfioArrayGetDate = _pdfioArrayGetDatePtr
      .asFunction<int Function(ffi.Pointer<pdfio_array_t>, int)>();

  ffi.Pointer<pdfio_dict_t> pdfioArrayGetDict(
    ffi.Pointer<pdfio_array_t> a,
    int n,
  ) {
    return _pdfioArrayGetDict(
      a,
      n,
    );
  }

  late final _pdfioArrayGetDictPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pdfio_dict_t> Function(
              ffi.Pointer<pdfio_array_t>, ffi.Int)>>('pdfioArrayGetDict');
  late final _pdfioArrayGetDict = _pdfioArrayGetDictPtr.asFunction<
      ffi.Pointer<pdfio_dict_t> Function(ffi.Pointer<pdfio_array_t>, int)>();

  ffi.Pointer<ffi.Char> pdfioArrayGetName(
    ffi.Pointer<pdfio_array_t> a,
    int n,
  ) {
    return _pdfioArrayGetName(
      a,
      n,
    );
  }

  late final _pdfioArrayGetNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<pdfio_array_t>, ffi.Int)>>('pdfioArrayGetName');
  late final _pdfioArrayGetName = _pdfioArrayGetNamePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<pdfio_array_t>, int)>();

  double pdfioArrayGetNumber(
    ffi.Pointer<pdfio_array_t> a,
    int n,
  ) {
    return _pdfioArrayGetNumber(
      a,
      n,
    );
  }

  late final _pdfioArrayGetNumberPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<pdfio_array_t>, ffi.Int)>>('pdfioArrayGetNumber');
  late final _pdfioArrayGetNumber = _pdfioArrayGetNumberPtr
      .asFunction<double Function(ffi.Pointer<pdfio_array_t>, int)>();

  ffi.Pointer<pdfio_obj_t> pdfioArrayGetObj(
    ffi.Pointer<pdfio_array_t> a,
    int n,
  ) {
    return _pdfioArrayGetObj(
      a,
      n,
    );
  }

  late final _pdfioArrayGetObjPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pdfio_obj_t> Function(
              ffi.Pointer<pdfio_array_t>, ffi.Int)>>('pdfioArrayGetObj');
  late final _pdfioArrayGetObj = _pdfioArrayGetObjPtr.asFunction<
      ffi.Pointer<pdfio_obj_t> Function(ffi.Pointer<pdfio_array_t>, int)>();

  int pdfioArrayGetSize(
    ffi.Pointer<pdfio_array_t> a,
  ) {
    return _pdfioArrayGetSize(
      a,
    );
  }

  late final _pdfioArrayGetSizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pdfio_array_t>)>>(
          'pdfioArrayGetSize');
  late final _pdfioArrayGetSize = _pdfioArrayGetSizePtr
      .asFunction<int Function(ffi.Pointer<pdfio_array_t>)>();

  ffi.Pointer<ffi.Char> pdfioArrayGetString(
    ffi.Pointer<pdfio_array_t> a,
    int n,
  ) {
    return _pdfioArrayGetString(
      a,
      n,
    );
  }

  late final _pdfioArrayGetStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<pdfio_array_t>, ffi.Int)>>('pdfioArrayGetString');
  late final _pdfioArrayGetString = _pdfioArrayGetStringPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<pdfio_array_t>, int)>();

  int pdfioArrayGetType(
    ffi.Pointer<pdfio_array_t> a,
    int n,
  ) {
    return _pdfioArrayGetType(
      a,
      n,
    );
  }

  late final _pdfioArrayGetTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<pdfio_array_t>, ffi.Int)>>('pdfioArrayGetType');
  late final _pdfioArrayGetType = _pdfioArrayGetTypePtr
      .asFunction<int Function(ffi.Pointer<pdfio_array_t>, int)>();

  ffi.Pointer<pdfio_dict_t> pdfioDictCopy(
    ffi.Pointer<pdfio_file_t> pdf,
    ffi.Pointer<pdfio_dict_t> dict,
  ) {
    return _pdfioDictCopy(
      pdf,
      dict,
    );
  }

  late final _pdfioDictCopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pdfio_dict_t> Function(ffi.Pointer<pdfio_file_t>,
              ffi.Pointer<pdfio_dict_t>)>>('pdfioDictCopy');
  late final _pdfioDictCopy = _pdfioDictCopyPtr.asFunction<
      ffi.Pointer<pdfio_dict_t> Function(
          ffi.Pointer<pdfio_file_t>, ffi.Pointer<pdfio_dict_t>)>();

  ffi.Pointer<pdfio_dict_t> pdfioDictCreate(
    ffi.Pointer<pdfio_file_t> pdf,
  ) {
    return _pdfioDictCreate(
      pdf,
    );
  }

  late final _pdfioDictCreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pdfio_dict_t> Function(
              ffi.Pointer<pdfio_file_t>)>>('pdfioDictCreate');
  late final _pdfioDictCreate = _pdfioDictCreatePtr.asFunction<
      ffi.Pointer<pdfio_dict_t> Function(ffi.Pointer<pdfio_file_t>)>();

  ffi.Pointer<pdfio_array_t> pdfioDictGetArray(
    ffi.Pointer<pdfio_dict_t> dict,
    ffi.Pointer<ffi.Char> key,
  ) {
    return _pdfioDictGetArray(
      dict,
      key,
    );
  }

  late final _pdfioDictGetArrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pdfio_array_t> Function(ffi.Pointer<pdfio_dict_t>,
              ffi.Pointer<ffi.Char>)>>('pdfioDictGetArray');
  late final _pdfioDictGetArray = _pdfioDictGetArrayPtr.asFunction<
      ffi.Pointer<pdfio_array_t> Function(
          ffi.Pointer<pdfio_dict_t>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.UnsignedChar> pdfioDictGetBinary(
    ffi.Pointer<pdfio_dict_t> dict,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Int> length,
  ) {
    return _pdfioDictGetBinary(
      dict,
      key,
      length,
    );
  }

  late final _pdfioDictGetBinaryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<pdfio_dict_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('pdfioDictGetBinary');
  late final _pdfioDictGetBinary = _pdfioDictGetBinaryPtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<pdfio_dict_t>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>();

  int pdfioDictGetBoolean(
    ffi.Pointer<pdfio_dict_t> dict,
    ffi.Pointer<ffi.Char> key,
  ) {
    return _pdfioDictGetBoolean(
      dict,
      key,
    );
  }

  late final _pdfioDictGetBooleanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pdfio_dict_t>,
              ffi.Pointer<ffi.Char>)>>('pdfioDictGetBoolean');
  late final _pdfioDictGetBoolean = _pdfioDictGetBooleanPtr.asFunction<
      int Function(ffi.Pointer<pdfio_dict_t>, ffi.Pointer<ffi.Char>)>();

  int pdfioDictGetDate(
    ffi.Pointer<pdfio_dict_t> dict,
    ffi.Pointer<ffi.Char> key,
  ) {
    return _pdfioDictGetDate(
      dict,
      key,
    );
  }

  late final _pdfioDictGetDatePtr = _lookup<
      ffi.NativeFunction<
          time_t Function(ffi.Pointer<pdfio_dict_t>,
              ffi.Pointer<ffi.Char>)>>('pdfioDictGetDate');
  late final _pdfioDictGetDate = _pdfioDictGetDatePtr.asFunction<
      int Function(ffi.Pointer<pdfio_dict_t>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<pdfio_dict_t> pdfioDictGetDict(
    ffi.Pointer<pdfio_dict_t> dict,
    ffi.Pointer<ffi.Char> key,
  ) {
    return _pdfioDictGetDict(
      dict,
      key,
    );
  }

  late final _pdfioDictGetDictPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pdfio_dict_t> Function(ffi.Pointer<pdfio_dict_t>,
              ffi.Pointer<ffi.Char>)>>('pdfioDictGetDict');
  late final _pdfioDictGetDict = _pdfioDictGetDictPtr.asFunction<
      ffi.Pointer<pdfio_dict_t> Function(
          ffi.Pointer<pdfio_dict_t>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> pdfioDictGetName(
    ffi.Pointer<pdfio_dict_t> dict,
    ffi.Pointer<ffi.Char> key,
  ) {
    return _pdfioDictGetName(
      dict,
      key,
    );
  }

  late final _pdfioDictGetNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<pdfio_dict_t>,
              ffi.Pointer<ffi.Char>)>>('pdfioDictGetName');
  late final _pdfioDictGetName = _pdfioDictGetNamePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<pdfio_dict_t>, ffi.Pointer<ffi.Char>)>();

  double pdfioDictGetNumber(
    ffi.Pointer<pdfio_dict_t> dict,
    ffi.Pointer<ffi.Char> key,
  ) {
    return _pdfioDictGetNumber(
      dict,
      key,
    );
  }

  late final _pdfioDictGetNumberPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<pdfio_dict_t>,
              ffi.Pointer<ffi.Char>)>>('pdfioDictGetNumber');
  late final _pdfioDictGetNumber = _pdfioDictGetNumberPtr.asFunction<
      double Function(ffi.Pointer<pdfio_dict_t>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<pdfio_obj_t> pdfioDictGetObj(
    ffi.Pointer<pdfio_dict_t> dict,
    ffi.Pointer<ffi.Char> key,
  ) {
    return _pdfioDictGetObj(
      dict,
      key,
    );
  }

  late final _pdfioDictGetObjPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pdfio_obj_t> Function(ffi.Pointer<pdfio_dict_t>,
              ffi.Pointer<ffi.Char>)>>('pdfioDictGetObj');
  late final _pdfioDictGetObj = _pdfioDictGetObjPtr.asFunction<
      ffi.Pointer<pdfio_obj_t> Function(
          ffi.Pointer<pdfio_dict_t>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<pdfio_rect_t> pdfioDictGetRect(
    ffi.Pointer<pdfio_dict_t> dict,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<pdfio_rect_t> rect,
  ) {
    return _pdfioDictGetRect(
      dict,
      key,
      rect,
    );
  }

  late final _pdfioDictGetRectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pdfio_rect_t> Function(
              ffi.Pointer<pdfio_dict_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<pdfio_rect_t>)>>('pdfioDictGetRect');
  late final _pdfioDictGetRect = _pdfioDictGetRectPtr.asFunction<
      ffi.Pointer<pdfio_rect_t> Function(ffi.Pointer<pdfio_dict_t>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<pdfio_rect_t>)>();

  ffi.Pointer<ffi.Char> pdfioDictGetString(
    ffi.Pointer<pdfio_dict_t> dict,
    ffi.Pointer<ffi.Char> key,
  ) {
    return _pdfioDictGetString(
      dict,
      key,
    );
  }

  late final _pdfioDictGetStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<pdfio_dict_t>,
              ffi.Pointer<ffi.Char>)>>('pdfioDictGetString');
  late final _pdfioDictGetString = _pdfioDictGetStringPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<pdfio_dict_t>, ffi.Pointer<ffi.Char>)>();

  int pdfioDictGetType(
    ffi.Pointer<pdfio_dict_t> dict,
    ffi.Pointer<ffi.Char> key,
  ) {
    return _pdfioDictGetType(
      dict,
      key,
    );
  }

  late final _pdfioDictGetTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<pdfio_dict_t>,
              ffi.Pointer<ffi.Char>)>>('pdfioDictGetType');
  late final _pdfioDictGetType = _pdfioDictGetTypePtr.asFunction<
      int Function(ffi.Pointer<pdfio_dict_t>, ffi.Pointer<ffi.Char>)>();

  void pdfioDictIterateKeys(
    ffi.Pointer<pdfio_dict_t> dict,
    int cb,
    ffi.Pointer<ffi.Void> cb_data,
  ) {
    return _pdfioDictIterateKeys(
      dict,
      cb,
      cb_data,
    );
  }

  late final _pdfioDictIterateKeysPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pdfio_dict_t>, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('pdfioDictIterateKeys');
  late final _pdfioDictIterateKeys = _pdfioDictIterateKeysPtr.asFunction<
      void Function(ffi.Pointer<pdfio_dict_t>, int, ffi.Pointer<ffi.Void>)>();

  int pdfioDictSetArray(
    ffi.Pointer<pdfio_dict_t> dict,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<pdfio_array_t> value,
  ) {
    return _pdfioDictSetArray(
      dict,
      key,
      value,
    );
  }

  late final _pdfioDictSetArrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pdfio_dict_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<pdfio_array_t>)>>('pdfioDictSetArray');
  late final _pdfioDictSetArray = _pdfioDictSetArrayPtr.asFunction<
      int Function(ffi.Pointer<pdfio_dict_t>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<pdfio_array_t>)>();

  int pdfioDictSetBinary(
    ffi.Pointer<pdfio_dict_t> dict,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.UnsignedChar> value,
    int valuelen,
  ) {
    return _pdfioDictSetBinary(
      dict,
      key,
      value,
      valuelen,
    );
  }

  late final _pdfioDictSetBinaryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pdfio_dict_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.UnsignedChar>, ffi.Int)>>('pdfioDictSetBinary');
  late final _pdfioDictSetBinary = _pdfioDictSetBinaryPtr.asFunction<
      int Function(ffi.Pointer<pdfio_dict_t>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.UnsignedChar>, int)>();

  int pdfioDictSetBoolean(
    ffi.Pointer<pdfio_dict_t> dict,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<bool> value,
  ) {
    return _pdfioDictSetBoolean(
      dict,
      key,
      value,
    );
  }

  late final _pdfioDictSetBooleanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pdfio_dict_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<bool>)>>('pdfioDictSetBoolean');
  late final _pdfioDictSetBoolean = _pdfioDictSetBooleanPtr.asFunction<
      int Function(ffi.Pointer<pdfio_dict_t>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<bool>)>();

  int pdfioDictSetDate(
    ffi.Pointer<pdfio_dict_t> dict,
    ffi.Pointer<ffi.Char> key,
    int value,
  ) {
    return _pdfioDictSetDate(
      dict,
      key,
      value,
    );
  }

  late final _pdfioDictSetDatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pdfio_dict_t>, ffi.Pointer<ffi.Char>,
              time_t)>>('pdfioDictSetDate');
  late final _pdfioDictSetDate = _pdfioDictSetDatePtr.asFunction<
      int Function(ffi.Pointer<pdfio_dict_t>, ffi.Pointer<ffi.Char>, int)>();

  int pdfioDictSetDict(
    ffi.Pointer<pdfio_dict_t> dict,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<pdfio_dict_t> value,
  ) {
    return _pdfioDictSetDict(
      dict,
      key,
      value,
    );
  }

  late final _pdfioDictSetDictPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pdfio_dict_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<pdfio_dict_t>)>>('pdfioDictSetDict');
  late final _pdfioDictSetDict = _pdfioDictSetDictPtr.asFunction<
      int Function(ffi.Pointer<pdfio_dict_t>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<pdfio_dict_t>)>();

  int pdfioDictSetName(
    ffi.Pointer<pdfio_dict_t> dict,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _pdfioDictSetName(
      dict,
      key,
      value,
    );
  }

  late final _pdfioDictSetNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pdfio_dict_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('pdfioDictSetName');
  late final _pdfioDictSetName = _pdfioDictSetNamePtr.asFunction<
      int Function(ffi.Pointer<pdfio_dict_t>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  int pdfioDictSetNull(
    ffi.Pointer<pdfio_dict_t> dict,
    ffi.Pointer<ffi.Char> key,
  ) {
    return _pdfioDictSetNull(
      dict,
      key,
    );
  }

  late final _pdfioDictSetNullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pdfio_dict_t>,
              ffi.Pointer<ffi.Char>)>>('pdfioDictSetNull');
  late final _pdfioDictSetNull = _pdfioDictSetNullPtr.asFunction<
      int Function(ffi.Pointer<pdfio_dict_t>, ffi.Pointer<ffi.Char>)>();

  int pdfioDictSetNumber(
    ffi.Pointer<pdfio_dict_t> dict,
    ffi.Pointer<ffi.Char> key,
    double value,
  ) {
    return _pdfioDictSetNumber(
      dict,
      key,
      value,
    );
  }

  late final _pdfioDictSetNumberPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pdfio_dict_t>, ffi.Pointer<ffi.Char>,
              ffi.Double)>>('pdfioDictSetNumber');
  late final _pdfioDictSetNumber = _pdfioDictSetNumberPtr.asFunction<
      int Function(ffi.Pointer<pdfio_dict_t>, ffi.Pointer<ffi.Char>, double)>();

  int pdfioDictSetObj(
    ffi.Pointer<pdfio_dict_t> dict,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<pdfio_obj_t> value,
  ) {
    return _pdfioDictSetObj(
      dict,
      key,
      value,
    );
  }

  late final _pdfioDictSetObjPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pdfio_dict_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<pdfio_obj_t>)>>('pdfioDictSetObj');
  late final _pdfioDictSetObj = _pdfioDictSetObjPtr.asFunction<
      int Function(ffi.Pointer<pdfio_dict_t>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<pdfio_obj_t>)>();

  int pdfioDictSetRect(
    ffi.Pointer<pdfio_dict_t> dict,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<pdfio_rect_t> value,
  ) {
    return _pdfioDictSetRect(
      dict,
      key,
      value,
    );
  }

  late final _pdfioDictSetRectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pdfio_dict_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<pdfio_rect_t>)>>('pdfioDictSetRect');
  late final _pdfioDictSetRect = _pdfioDictSetRectPtr.asFunction<
      int Function(ffi.Pointer<pdfio_dict_t>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<pdfio_rect_t>)>();

  int pdfioDictSetString(
    ffi.Pointer<pdfio_dict_t> dict,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _pdfioDictSetString(
      dict,
      key,
      value,
    );
  }

  late final _pdfioDictSetStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pdfio_dict_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('pdfioDictSetString');
  late final _pdfioDictSetString = _pdfioDictSetStringPtr.asFunction<
      int Function(ffi.Pointer<pdfio_dict_t>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  int pdfioDictSetStringf(
    ffi.Pointer<pdfio_dict_t> dict,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _pdfioDictSetStringf(
      dict,
      key,
      format,
    );
  }

  late final _pdfioDictSetStringfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pdfio_dict_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('pdfioDictSetStringf');
  late final _pdfioDictSetStringf = _pdfioDictSetStringfPtr.asFunction<
      int Function(ffi.Pointer<pdfio_dict_t>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  int pdfioFileClose(
    ffi.Pointer<pdfio_file_t> pdf,
  ) {
    return _pdfioFileClose(
      pdf,
    );
  }

  late final _pdfioFileClosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pdfio_file_t>)>>(
          'pdfioFileClose');
  late final _pdfioFileClose =
      _pdfioFileClosePtr.asFunction<int Function(ffi.Pointer<pdfio_file_t>)>();

  ffi.Pointer<pdfio_file_t> pdfioFileCreate(
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<ffi.Char> version,
    ffi.Pointer<pdfio_rect_t> media_box,
    ffi.Pointer<pdfio_rect_t> crop_box,
    pdfio_error_cb_t error_cb,
    ffi.Pointer<ffi.Void> error_data,
  ) {
    return _pdfioFileCreate(
      filename,
      version,
      media_box,
      crop_box,
      error_cb,
      error_data,
    );
  }

  late final _pdfioFileCreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pdfio_file_t> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<pdfio_rect_t>,
              ffi.Pointer<pdfio_rect_t>,
              pdfio_error_cb_t,
              ffi.Pointer<ffi.Void>)>>('pdfioFileCreate');
  late final _pdfioFileCreate = _pdfioFileCreatePtr.asFunction<
      ffi.Pointer<pdfio_file_t> Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<pdfio_rect_t>,
          ffi.Pointer<pdfio_rect_t>,
          pdfio_error_cb_t,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pdfio_obj_t> pdfioFileCreateArrayObj(
    ffi.Pointer<pdfio_file_t> pdf,
    ffi.Pointer<pdfio_array_t> array,
  ) {
    return _pdfioFileCreateArrayObj(
      pdf,
      array,
    );
  }

  late final _pdfioFileCreateArrayObjPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pdfio_obj_t> Function(ffi.Pointer<pdfio_file_t>,
              ffi.Pointer<pdfio_array_t>)>>('pdfioFileCreateArrayObj');
  late final _pdfioFileCreateArrayObj = _pdfioFileCreateArrayObjPtr.asFunction<
      ffi.Pointer<pdfio_obj_t> Function(
          ffi.Pointer<pdfio_file_t>, ffi.Pointer<pdfio_array_t>)>();

  ffi.Pointer<pdfio_obj_t> pdfioFileCreateNumberObj(
    ffi.Pointer<pdfio_file_t> pdf,
    double number,
  ) {
    return _pdfioFileCreateNumberObj(
      pdf,
      number,
    );
  }

  late final _pdfioFileCreateNumberObjPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pdfio_obj_t> Function(ffi.Pointer<pdfio_file_t>,
              ffi.Double)>>('pdfioFileCreateNumberObj');
  late final _pdfioFileCreateNumberObj =
      _pdfioFileCreateNumberObjPtr.asFunction<
          ffi.Pointer<pdfio_obj_t> Function(
              ffi.Pointer<pdfio_file_t>, double)>();

  ffi.Pointer<pdfio_obj_t> pdfioFileCreateObj(
    ffi.Pointer<pdfio_file_t> pdf,
    ffi.Pointer<pdfio_dict_t> dict,
  ) {
    return _pdfioFileCreateObj(
      pdf,
      dict,
    );
  }

  late final _pdfioFileCreateObjPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pdfio_obj_t> Function(ffi.Pointer<pdfio_file_t>,
              ffi.Pointer<pdfio_dict_t>)>>('pdfioFileCreateObj');
  late final _pdfioFileCreateObj = _pdfioFileCreateObjPtr.asFunction<
      ffi.Pointer<pdfio_obj_t> Function(
          ffi.Pointer<pdfio_file_t>, ffi.Pointer<pdfio_dict_t>)>();

  ffi.Pointer<pdfio_file_t> pdfioFileCreateOutput(
    pdfio_output_cb_t output_cb,
    ffi.Pointer<ffi.Void> output_ctx,
    ffi.Pointer<ffi.Char> version,
    ffi.Pointer<pdfio_rect_t> media_box,
    ffi.Pointer<pdfio_rect_t> crop_box,
    pdfio_error_cb_t error_cb,
    ffi.Pointer<ffi.Void> error_data,
  ) {
    return _pdfioFileCreateOutput(
      output_cb,
      output_ctx,
      version,
      media_box,
      crop_box,
      error_cb,
      error_data,
    );
  }

  late final _pdfioFileCreateOutputPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pdfio_file_t> Function(
              pdfio_output_cb_t,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<pdfio_rect_t>,
              ffi.Pointer<pdfio_rect_t>,
              pdfio_error_cb_t,
              ffi.Pointer<ffi.Void>)>>('pdfioFileCreateOutput');
  late final _pdfioFileCreateOutput = _pdfioFileCreateOutputPtr.asFunction<
      ffi.Pointer<pdfio_file_t> Function(
          pdfio_output_cb_t,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<pdfio_rect_t>,
          ffi.Pointer<pdfio_rect_t>,
          pdfio_error_cb_t,
          ffi.Pointer<ffi.Void>)>();

  /// TODO: Add number, array, string, etc. versions of pdfioFileCreateObject?
  ffi.Pointer<pdfio_stream_t> pdfioFileCreatePage(
    ffi.Pointer<pdfio_file_t> pdf,
    ffi.Pointer<pdfio_dict_t> dict,
  ) {
    return _pdfioFileCreatePage(
      pdf,
      dict,
    );
  }

  late final _pdfioFileCreatePagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pdfio_stream_t> Function(ffi.Pointer<pdfio_file_t>,
              ffi.Pointer<pdfio_dict_t>)>>('pdfioFileCreatePage');
  late final _pdfioFileCreatePage = _pdfioFileCreatePagePtr.asFunction<
      ffi.Pointer<pdfio_stream_t> Function(
          ffi.Pointer<pdfio_file_t>, ffi.Pointer<pdfio_dict_t>)>();

  ffi.Pointer<pdfio_obj_t> pdfioFileCreateStringObj(
    ffi.Pointer<pdfio_file_t> pdf,
    ffi.Pointer<ffi.Char> s,
  ) {
    return _pdfioFileCreateStringObj(
      pdf,
      s,
    );
  }

  late final _pdfioFileCreateStringObjPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pdfio_obj_t> Function(ffi.Pointer<pdfio_file_t>,
              ffi.Pointer<ffi.Char>)>>('pdfioFileCreateStringObj');
  late final _pdfioFileCreateStringObj =
      _pdfioFileCreateStringObjPtr.asFunction<
          ffi.Pointer<pdfio_obj_t> Function(
              ffi.Pointer<pdfio_file_t>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<pdfio_file_t> pdfioFileCreateTemporary(
    ffi.Pointer<ffi.Char> buffer,
    int bufsize,
    ffi.Pointer<ffi.Char> version,
    ffi.Pointer<pdfio_rect_t> media_box,
    ffi.Pointer<pdfio_rect_t> crop_box,
    pdfio_error_cb_t error_cb,
    ffi.Pointer<ffi.Void> error_data,
  ) {
    return _pdfioFileCreateTemporary(
      buffer,
      bufsize,
      version,
      media_box,
      crop_box,
      error_cb,
      error_data,
    );
  }

  late final _pdfioFileCreateTemporaryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pdfio_file_t> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<pdfio_rect_t>,
              ffi.Pointer<pdfio_rect_t>,
              pdfio_error_cb_t,
              ffi.Pointer<ffi.Void>)>>('pdfioFileCreateTemporary');
  late final _pdfioFileCreateTemporary =
      _pdfioFileCreateTemporaryPtr.asFunction<
          ffi.Pointer<pdfio_file_t> Function(
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<pdfio_rect_t>,
              ffi.Pointer<pdfio_rect_t>,
              pdfio_error_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pdfio_obj_t> pdfioFileFindObj(
    ffi.Pointer<pdfio_file_t> pdf,
    int number,
  ) {
    return _pdfioFileFindObj(
      pdf,
      number,
    );
  }

  late final _pdfioFileFindObjPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pdfio_obj_t> Function(
              ffi.Pointer<pdfio_file_t>, ffi.Int)>>('pdfioFileFindObj');
  late final _pdfioFileFindObj = _pdfioFileFindObjPtr.asFunction<
      ffi.Pointer<pdfio_obj_t> Function(ffi.Pointer<pdfio_file_t>, int)>();

  ffi.Pointer<ffi.Char> pdfioFileGetAuthor(
    ffi.Pointer<pdfio_file_t> pdf,
  ) {
    return _pdfioFileGetAuthor(
      pdf,
    );
  }

  late final _pdfioFileGetAuthorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<pdfio_file_t>)>>('pdfioFileGetAuthor');
  late final _pdfioFileGetAuthor = _pdfioFileGetAuthorPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<pdfio_file_t>)>();

  int pdfioFileGetCreationDate(
    ffi.Pointer<pdfio_file_t> pdf,
  ) {
    return _pdfioFileGetCreationDate(
      pdf,
    );
  }

  late final _pdfioFileGetCreationDatePtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<pdfio_file_t>)>>(
          'pdfioFileGetCreationDate');
  late final _pdfioFileGetCreationDate = _pdfioFileGetCreationDatePtr
      .asFunction<int Function(ffi.Pointer<pdfio_file_t>)>();

  ffi.Pointer<ffi.Char> pdfioFileGetCreator(
    ffi.Pointer<pdfio_file_t> pdf,
  ) {
    return _pdfioFileGetCreator(
      pdf,
    );
  }

  late final _pdfioFileGetCreatorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<pdfio_file_t>)>>('pdfioFileGetCreator');
  late final _pdfioFileGetCreator = _pdfioFileGetCreatorPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<pdfio_file_t>)>();

  ffi.Pointer<pdfio_array_t> pdfioFileGetID(
    ffi.Pointer<pdfio_file_t> pdf,
  ) {
    return _pdfioFileGetID(
      pdf,
    );
  }

  late final _pdfioFileGetIDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pdfio_array_t> Function(
              ffi.Pointer<pdfio_file_t>)>>('pdfioFileGetID');
  late final _pdfioFileGetID = _pdfioFileGetIDPtr.asFunction<
      ffi.Pointer<pdfio_array_t> Function(ffi.Pointer<pdfio_file_t>)>();

  ffi.Pointer<ffi.Char> pdfioFileGetKeywords(
    ffi.Pointer<pdfio_file_t> pdf,
  ) {
    return _pdfioFileGetKeywords(
      pdf,
    );
  }

  late final _pdfioFileGetKeywordsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<pdfio_file_t>)>>('pdfioFileGetKeywords');
  late final _pdfioFileGetKeywords = _pdfioFileGetKeywordsPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<pdfio_file_t>)>();

  ffi.Pointer<ffi.Char> pdfioFileGetName(
    ffi.Pointer<pdfio_file_t> pdf,
  ) {
    return _pdfioFileGetName(
      pdf,
    );
  }

  late final _pdfioFileGetNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<pdfio_file_t>)>>('pdfioFileGetName');
  late final _pdfioFileGetName = _pdfioFileGetNamePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<pdfio_file_t>)>();

  int pdfioFileGetNumObjs(
    ffi.Pointer<pdfio_file_t> pdf,
  ) {
    return _pdfioFileGetNumObjs(
      pdf,
    );
  }

  late final _pdfioFileGetNumObjsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pdfio_file_t>)>>(
          'pdfioFileGetNumObjs');
  late final _pdfioFileGetNumObjs = _pdfioFileGetNumObjsPtr
      .asFunction<int Function(ffi.Pointer<pdfio_file_t>)>();

  int pdfioFileGetNumPages(
    ffi.Pointer<pdfio_file_t> pdf,
  ) {
    return _pdfioFileGetNumPages(
      pdf,
    );
  }

  late final _pdfioFileGetNumPagesPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pdfio_file_t>)>>(
          'pdfioFileGetNumPages');
  late final _pdfioFileGetNumPages = _pdfioFileGetNumPagesPtr
      .asFunction<int Function(ffi.Pointer<pdfio_file_t>)>();

  ffi.Pointer<pdfio_obj_t> pdfioFileGetObj(
    ffi.Pointer<pdfio_file_t> pdf,
    int n,
  ) {
    return _pdfioFileGetObj(
      pdf,
      n,
    );
  }

  late final _pdfioFileGetObjPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pdfio_obj_t> Function(
              ffi.Pointer<pdfio_file_t>, ffi.Int)>>('pdfioFileGetObj');
  late final _pdfioFileGetObj = _pdfioFileGetObjPtr.asFunction<
      ffi.Pointer<pdfio_obj_t> Function(ffi.Pointer<pdfio_file_t>, int)>();

  ffi.Pointer<pdfio_obj_t> pdfioFileGetPage(
    ffi.Pointer<pdfio_file_t> pdf,
    int n,
  ) {
    return _pdfioFileGetPage(
      pdf,
      n,
    );
  }

  late final _pdfioFileGetPagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pdfio_obj_t> Function(
              ffi.Pointer<pdfio_file_t>, ffi.Int)>>('pdfioFileGetPage');
  late final _pdfioFileGetPage = _pdfioFileGetPagePtr.asFunction<
      ffi.Pointer<pdfio_obj_t> Function(ffi.Pointer<pdfio_file_t>, int)>();

  int pdfioFileGetPermissions(
    ffi.Pointer<pdfio_file_t> pdf,
    ffi.Pointer<ffi.Int32> encryption,
  ) {
    return _pdfioFileGetPermissions(
      pdf,
      encryption,
    );
  }

  late final _pdfioFileGetPermissionsPtr = _lookup<
      ffi.NativeFunction<
          pdfio_permission_t Function(ffi.Pointer<pdfio_file_t>,
              ffi.Pointer<ffi.Int32>)>>('pdfioFileGetPermissions');
  late final _pdfioFileGetPermissions = _pdfioFileGetPermissionsPtr.asFunction<
      int Function(ffi.Pointer<pdfio_file_t>, ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Char> pdfioFileGetProducer(
    ffi.Pointer<pdfio_file_t> pdf,
  ) {
    return _pdfioFileGetProducer(
      pdf,
    );
  }

  late final _pdfioFileGetProducerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<pdfio_file_t>)>>('pdfioFileGetProducer');
  late final _pdfioFileGetProducer = _pdfioFileGetProducerPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<pdfio_file_t>)>();

  ffi.Pointer<ffi.Char> pdfioFileGetSubject(
    ffi.Pointer<pdfio_file_t> pdf,
  ) {
    return _pdfioFileGetSubject(
      pdf,
    );
  }

  late final _pdfioFileGetSubjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<pdfio_file_t>)>>('pdfioFileGetSubject');
  late final _pdfioFileGetSubject = _pdfioFileGetSubjectPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<pdfio_file_t>)>();

  ffi.Pointer<ffi.Char> pdfioFileGetTitle(
    ffi.Pointer<pdfio_file_t> pdf,
  ) {
    return _pdfioFileGetTitle(
      pdf,
    );
  }

  late final _pdfioFileGetTitlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<pdfio_file_t>)>>('pdfioFileGetTitle');
  late final _pdfioFileGetTitle = _pdfioFileGetTitlePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<pdfio_file_t>)>();

  ffi.Pointer<ffi.Char> pdfioFileGetVersion(
    ffi.Pointer<pdfio_file_t> pdf,
  ) {
    return _pdfioFileGetVersion(
      pdf,
    );
  }

  late final _pdfioFileGetVersionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<pdfio_file_t>)>>('pdfioFileGetVersion');
  late final _pdfioFileGetVersion = _pdfioFileGetVersionPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<pdfio_file_t>)>();

  ffi.Pointer<pdfio_file_t> pdfioFileOpen(
    ffi.Pointer<ffi.Char> filename,
    pdfio_password_cb_t password_cb,
    ffi.Pointer<ffi.Void> password_data,
    pdfio_error_cb_t error_cb,
    ffi.Pointer<ffi.Void> error_data,
  ) {
    return _pdfioFileOpen(
      filename,
      password_cb,
      password_data,
      error_cb,
      error_data,
    );
  }

  late final _pdfioFileOpenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pdfio_file_t> Function(
              ffi.Pointer<ffi.Char>,
              pdfio_password_cb_t,
              ffi.Pointer<ffi.Void>,
              pdfio_error_cb_t,
              ffi.Pointer<ffi.Void>)>>('pdfioFileOpen');
  late final _pdfioFileOpen = _pdfioFileOpenPtr.asFunction<
      ffi.Pointer<pdfio_file_t> Function(
          ffi.Pointer<ffi.Char>,
          pdfio_password_cb_t,
          ffi.Pointer<ffi.Void>,
          pdfio_error_cb_t,
          ffi.Pointer<ffi.Void>)>();

  int pdfioFileParse(
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _pdfioFileParse(
      filename,
    );
  }

  late final _pdfioFileParsePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'pdfioFileParse');
  late final _pdfioFileParse =
      _pdfioFileParsePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  void pdfioFileSetAuthor(
    ffi.Pointer<pdfio_file_t> pdf,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _pdfioFileSetAuthor(
      pdf,
      value,
    );
  }

  late final _pdfioFileSetAuthorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pdfio_file_t>,
              ffi.Pointer<ffi.Char>)>>('pdfioFileSetAuthor');
  late final _pdfioFileSetAuthor = _pdfioFileSetAuthorPtr.asFunction<
      void Function(ffi.Pointer<pdfio_file_t>, ffi.Pointer<ffi.Char>)>();

  void pdfioFileSetCreationDate(
    ffi.Pointer<pdfio_file_t> pdf,
    int value,
  ) {
    return _pdfioFileSetCreationDate(
      pdf,
      value,
    );
  }

  late final _pdfioFileSetCreationDatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<pdfio_file_t>, time_t)>>('pdfioFileSetCreationDate');
  late final _pdfioFileSetCreationDate = _pdfioFileSetCreationDatePtr
      .asFunction<void Function(ffi.Pointer<pdfio_file_t>, int)>();

  void pdfioFileSetCreator(
    ffi.Pointer<pdfio_file_t> pdf,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _pdfioFileSetCreator(
      pdf,
      value,
    );
  }

  late final _pdfioFileSetCreatorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pdfio_file_t>,
              ffi.Pointer<ffi.Char>)>>('pdfioFileSetCreator');
  late final _pdfioFileSetCreator = _pdfioFileSetCreatorPtr.asFunction<
      void Function(ffi.Pointer<pdfio_file_t>, ffi.Pointer<ffi.Char>)>();

  void pdfioFileSetKeywords(
    ffi.Pointer<pdfio_file_t> pdf,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _pdfioFileSetKeywords(
      pdf,
      value,
    );
  }

  late final _pdfioFileSetKeywordsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pdfio_file_t>,
              ffi.Pointer<ffi.Char>)>>('pdfioFileSetKeywords');
  late final _pdfioFileSetKeywords = _pdfioFileSetKeywordsPtr.asFunction<
      void Function(ffi.Pointer<pdfio_file_t>, ffi.Pointer<ffi.Char>)>();

  int pdfioFileSetPermissions(
    ffi.Pointer<pdfio_file_t> pdf,
    int permissions,
    int encryption,
    ffi.Pointer<ffi.Char> owner_password,
    ffi.Pointer<ffi.Char> user_password,
  ) {
    return _pdfioFileSetPermissions(
      pdf,
      permissions,
      encryption,
      owner_password,
      user_password,
    );
  }

  late final _pdfioFileSetPermissionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pdfio_file_t>,
              pdfio_permission_t,
              ffi.Int32,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('pdfioFileSetPermissions');
  late final _pdfioFileSetPermissions = _pdfioFileSetPermissionsPtr.asFunction<
      int Function(ffi.Pointer<pdfio_file_t>, int, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void pdfioFileSetSubject(
    ffi.Pointer<pdfio_file_t> pdf,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _pdfioFileSetSubject(
      pdf,
      value,
    );
  }

  late final _pdfioFileSetSubjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pdfio_file_t>,
              ffi.Pointer<ffi.Char>)>>('pdfioFileSetSubject');
  late final _pdfioFileSetSubject = _pdfioFileSetSubjectPtr.asFunction<
      void Function(ffi.Pointer<pdfio_file_t>, ffi.Pointer<ffi.Char>)>();

  void pdfioFileSetTitle(
    ffi.Pointer<pdfio_file_t> pdf,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _pdfioFileSetTitle(
      pdf,
      value,
    );
  }

  late final _pdfioFileSetTitlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pdfio_file_t>,
              ffi.Pointer<ffi.Char>)>>('pdfioFileSetTitle');
  late final _pdfioFileSetTitle = _pdfioFileSetTitlePtr.asFunction<
      void Function(ffi.Pointer<pdfio_file_t>, ffi.Pointer<ffi.Char>)>();

  int pdfioObjClose(
    ffi.Pointer<pdfio_obj_t> obj,
  ) {
    return _pdfioObjClose(
      obj,
    );
  }

  late final _pdfioObjClosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pdfio_obj_t>)>>(
          'pdfioObjClose');
  late final _pdfioObjClose =
      _pdfioObjClosePtr.asFunction<int Function(ffi.Pointer<pdfio_obj_t>)>();

  ffi.Pointer<pdfio_obj_t> pdfioObjCopy(
    ffi.Pointer<pdfio_file_t> pdf,
    ffi.Pointer<pdfio_obj_t> srcobj,
  ) {
    return _pdfioObjCopy(
      pdf,
      srcobj,
    );
  }

  late final _pdfioObjCopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pdfio_obj_t> Function(ffi.Pointer<pdfio_file_t>,
              ffi.Pointer<pdfio_obj_t>)>>('pdfioObjCopy');
  late final _pdfioObjCopy = _pdfioObjCopyPtr.asFunction<
      ffi.Pointer<pdfio_obj_t> Function(
          ffi.Pointer<pdfio_file_t>, ffi.Pointer<pdfio_obj_t>)>();

  ffi.Pointer<pdfio_stream_t> pdfioObjCreateStream(
    ffi.Pointer<pdfio_obj_t> obj,
    int compression,
  ) {
    return _pdfioObjCreateStream(
      obj,
      compression,
    );
  }

  late final _pdfioObjCreateStreamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pdfio_stream_t> Function(
              ffi.Pointer<pdfio_obj_t>, ffi.Int32)>>('pdfioObjCreateStream');
  late final _pdfioObjCreateStream = _pdfioObjCreateStreamPtr.asFunction<
      ffi.Pointer<pdfio_stream_t> Function(ffi.Pointer<pdfio_obj_t>, int)>();

  ffi.Pointer<pdfio_array_t> pdfioObjGetArray(
    ffi.Pointer<pdfio_obj_t> obj,
  ) {
    return _pdfioObjGetArray(
      obj,
    );
  }

  late final _pdfioObjGetArrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pdfio_array_t> Function(
              ffi.Pointer<pdfio_obj_t>)>>('pdfioObjGetArray');
  late final _pdfioObjGetArray = _pdfioObjGetArrayPtr.asFunction<
      ffi.Pointer<pdfio_array_t> Function(ffi.Pointer<pdfio_obj_t>)>();

  ffi.Pointer<pdfio_dict_t> pdfioObjGetDict(
    ffi.Pointer<pdfio_obj_t> obj,
  ) {
    return _pdfioObjGetDict(
      obj,
    );
  }

  late final _pdfioObjGetDictPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pdfio_dict_t> Function(
              ffi.Pointer<pdfio_obj_t>)>>('pdfioObjGetDict');
  late final _pdfioObjGetDict = _pdfioObjGetDictPtr.asFunction<
      ffi.Pointer<pdfio_dict_t> Function(ffi.Pointer<pdfio_obj_t>)>();

  int pdfioObjGetGeneration(
    ffi.Pointer<pdfio_obj_t> obj,
  ) {
    return _pdfioObjGetGeneration(
      obj,
    );
  }

  late final _pdfioObjGetGenerationPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedShort Function(
              ffi.Pointer<pdfio_obj_t>)>>('pdfioObjGetGeneration');
  late final _pdfioObjGetGeneration = _pdfioObjGetGenerationPtr
      .asFunction<int Function(ffi.Pointer<pdfio_obj_t>)>();

  int pdfioObjGetLength(
    ffi.Pointer<pdfio_obj_t> obj,
  ) {
    return _pdfioObjGetLength(
      obj,
    );
  }

  late final _pdfioObjGetLengthPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pdfio_obj_t>)>>(
          'pdfioObjGetLength');
  late final _pdfioObjGetLength = _pdfioObjGetLengthPtr
      .asFunction<int Function(ffi.Pointer<pdfio_obj_t>)>();

  int pdfioObjGetNumber(
    ffi.Pointer<pdfio_obj_t> obj,
  ) {
    return _pdfioObjGetNumber(
      obj,
    );
  }

  late final _pdfioObjGetNumberPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pdfio_obj_t>)>>(
          'pdfioObjGetNumber');
  late final _pdfioObjGetNumber = _pdfioObjGetNumberPtr
      .asFunction<int Function(ffi.Pointer<pdfio_obj_t>)>();

  ffi.Pointer<ffi.Char> pdfioObjGetSubtype(
    ffi.Pointer<pdfio_obj_t> obj,
  ) {
    return _pdfioObjGetSubtype(
      obj,
    );
  }

  late final _pdfioObjGetSubtypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<pdfio_obj_t>)>>('pdfioObjGetSubtype');
  late final _pdfioObjGetSubtype = _pdfioObjGetSubtypePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<pdfio_obj_t>)>();

  ffi.Pointer<ffi.Char> pdfioObjGetType(
    ffi.Pointer<pdfio_obj_t> obj,
  ) {
    return _pdfioObjGetType(
      obj,
    );
  }

  late final _pdfioObjGetTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<pdfio_obj_t>)>>('pdfioObjGetType');
  late final _pdfioObjGetType = _pdfioObjGetTypePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<pdfio_obj_t>)>();

  ffi.Pointer<pdfio_stream_t> pdfioObjOpenStream(
    ffi.Pointer<pdfio_obj_t> obj,
    ffi.Pointer<bool> decode,
  ) {
    return _pdfioObjOpenStream(
      obj,
      decode,
    );
  }

  late final _pdfioObjOpenStreamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pdfio_stream_t> Function(ffi.Pointer<pdfio_obj_t>,
              ffi.Pointer<bool>)>>('pdfioObjOpenStream');
  late final _pdfioObjOpenStream = _pdfioObjOpenStreamPtr.asFunction<
      ffi.Pointer<pdfio_stream_t> Function(
          ffi.Pointer<pdfio_obj_t>, ffi.Pointer<bool>)>();

  int pdfioPageCopy(
    ffi.Pointer<pdfio_file_t> pdf,
    ffi.Pointer<pdfio_obj_t> srcpage,
  ) {
    return _pdfioPageCopy(
      pdf,
      srcpage,
    );
  }

  late final _pdfioPageCopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pdfio_file_t>,
              ffi.Pointer<pdfio_obj_t>)>>('pdfioPageCopy');
  late final _pdfioPageCopy = _pdfioPageCopyPtr.asFunction<
      int Function(ffi.Pointer<pdfio_file_t>, ffi.Pointer<pdfio_obj_t>)>();

  int pdfioPageGetNumStreams(
    ffi.Pointer<pdfio_obj_t> page,
  ) {
    return _pdfioPageGetNumStreams(
      page,
    );
  }

  late final _pdfioPageGetNumStreamsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pdfio_obj_t>)>>(
          'pdfioPageGetNumStreams');
  late final _pdfioPageGetNumStreams = _pdfioPageGetNumStreamsPtr
      .asFunction<int Function(ffi.Pointer<pdfio_obj_t>)>();

  ffi.Pointer<pdfio_stream_t> pdfioPageOpenStream(
    ffi.Pointer<pdfio_obj_t> page,
    int n,
    ffi.Pointer<bool> decode,
  ) {
    return _pdfioPageOpenStream(
      page,
      n,
      decode,
    );
  }

  late final _pdfioPageOpenStreamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pdfio_stream_t> Function(ffi.Pointer<pdfio_obj_t>,
              ffi.Int, ffi.Pointer<bool>)>>('pdfioPageOpenStream');
  late final _pdfioPageOpenStream = _pdfioPageOpenStreamPtr.asFunction<
      ffi.Pointer<pdfio_stream_t> Function(
          ffi.Pointer<pdfio_obj_t>, int, ffi.Pointer<bool>)>();

  int pdfioStreamClose(
    ffi.Pointer<pdfio_stream_t> st,
  ) {
    return _pdfioStreamClose(
      st,
    );
  }

  late final _pdfioStreamClosePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pdfio_stream_t>)>>(
      'pdfioStreamClose');
  late final _pdfioStreamClose = _pdfioStreamClosePtr
      .asFunction<int Function(ffi.Pointer<pdfio_stream_t>)>();

  int pdfioStreamConsume(
    ffi.Pointer<pdfio_stream_t> st,
    int bytes,
  ) {
    return _pdfioStreamConsume(
      st,
      bytes,
    );
  }

  late final _pdfioStreamConsumePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pdfio_stream_t>, ffi.Int)>>('pdfioStreamConsume');
  late final _pdfioStreamConsume = _pdfioStreamConsumePtr
      .asFunction<int Function(ffi.Pointer<pdfio_stream_t>, int)>();

  int pdfioStreamGetToken(
    ffi.Pointer<pdfio_stream_t> st,
    ffi.Pointer<ffi.Char> buffer,
    int bufsize,
  ) {
    return _pdfioStreamGetToken(
      st,
      buffer,
      bufsize,
    );
  }

  late final _pdfioStreamGetTokenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pdfio_stream_t>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('pdfioStreamGetToken');
  late final _pdfioStreamGetToken = _pdfioStreamGetTokenPtr.asFunction<
      int Function(ffi.Pointer<pdfio_stream_t>, ffi.Pointer<ffi.Char>, int)>();

  int pdfioStreamPeek(
    ffi.Pointer<pdfio_stream_t> st,
    ffi.Pointer<ffi.Void> buffer,
    int bytes,
  ) {
    return _pdfioStreamPeek(
      st,
      buffer,
      bytes,
    );
  }

  late final _pdfioStreamPeekPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<pdfio_stream_t>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('pdfioStreamPeek');
  late final _pdfioStreamPeek = _pdfioStreamPeekPtr.asFunction<
      int Function(ffi.Pointer<pdfio_stream_t>, ffi.Pointer<ffi.Void>, int)>();

  int pdfioStreamPrintf(
    ffi.Pointer<pdfio_stream_t> st,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _pdfioStreamPrintf(
      st,
      format,
    );
  }

  late final _pdfioStreamPrintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pdfio_stream_t>,
              ffi.Pointer<ffi.Char>)>>('pdfioStreamPrintf');
  late final _pdfioStreamPrintf = _pdfioStreamPrintfPtr.asFunction<
      int Function(ffi.Pointer<pdfio_stream_t>, ffi.Pointer<ffi.Char>)>();

  int pdfioStreamPutChar(
    ffi.Pointer<pdfio_stream_t> st,
    int ch,
  ) {
    return _pdfioStreamPutChar(
      st,
      ch,
    );
  }

  late final _pdfioStreamPutCharPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pdfio_stream_t>, ffi.Int)>>('pdfioStreamPutChar');
  late final _pdfioStreamPutChar = _pdfioStreamPutCharPtr
      .asFunction<int Function(ffi.Pointer<pdfio_stream_t>, int)>();

  int pdfioStreamPuts(
    ffi.Pointer<pdfio_stream_t> st,
    ffi.Pointer<ffi.Char> s,
  ) {
    return _pdfioStreamPuts(
      st,
      s,
    );
  }

  late final _pdfioStreamPutsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pdfio_stream_t>,
              ffi.Pointer<ffi.Char>)>>('pdfioStreamPuts');
  late final _pdfioStreamPuts = _pdfioStreamPutsPtr.asFunction<
      int Function(ffi.Pointer<pdfio_stream_t>, ffi.Pointer<ffi.Char>)>();

  int pdfioStreamRead(
    ffi.Pointer<pdfio_stream_t> st,
    ffi.Pointer<ffi.Void> buffer,
    int bytes,
  ) {
    return _pdfioStreamRead(
      st,
      buffer,
      bytes,
    );
  }

  late final _pdfioStreamReadPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<pdfio_stream_t>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('pdfioStreamRead');
  late final _pdfioStreamRead = _pdfioStreamReadPtr.asFunction<
      int Function(ffi.Pointer<pdfio_stream_t>, ffi.Pointer<ffi.Void>, int)>();

  int pdfioStreamWrite(
    ffi.Pointer<pdfio_stream_t> st,
    ffi.Pointer<ffi.Void> buffer,
    int bytes,
  ) {
    return _pdfioStreamWrite(
      st,
      buffer,
      bytes,
    );
  }

  late final _pdfioStreamWritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pdfio_stream_t>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('pdfioStreamWrite');
  late final _pdfioStreamWrite = _pdfioStreamWritePtr.asFunction<
      int Function(ffi.Pointer<pdfio_stream_t>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> pdfioStringCreate(
    ffi.Pointer<pdfio_file_t> pdf,
    ffi.Pointer<ffi.Char> s,
  ) {
    return _pdfioStringCreate(
      pdf,
      s,
    );
  }

  late final _pdfioStringCreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<pdfio_file_t>,
              ffi.Pointer<ffi.Char>)>>('pdfioStringCreate');
  late final _pdfioStringCreate = _pdfioStringCreatePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<pdfio_file_t>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> pdfioStringCreatef(
    ffi.Pointer<pdfio_file_t> pdf,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _pdfioStringCreatef(
      pdf,
      format,
    );
  }

  late final _pdfioStringCreatefPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<pdfio_file_t>,
              ffi.Pointer<ffi.Char>)>>('pdfioStringCreatef');
  late final _pdfioStringCreatef = _pdfioStringCreatefPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<pdfio_file_t>, ffi.Pointer<ffi.Char>)>();
}

final class _pdfio_array_s extends ffi.Opaque {}

final class _pdfio_dict_s extends ffi.Opaque {}

final class _pdfio_file_s extends ffi.Opaque {}

/// Error callback
abstract class pdfio_encryption_e {
  /// No encryption
  static const int PDFIO_ENCRYPTION_NONE = 0;

  /// 40-bit RC4 encryption (PDF 1.3)
  static const int PDFIO_ENCRYPTION_RC4_40 = 1;

  /// 128-bit RC4 encryption (PDF 1.4)
  static const int PDFIO_ENCRYPTION_RC4_128 = 2;

  /// 128-bit AES encryption (PDF 1.6)
  static const int PDFIO_ENCRYPTION_AES_128 = 3;

  /// 256-bit AES encryption (PDF 2.0) @exclude all@
  static const int PDFIO_ENCRYPTION_AES_256 = 4;
}

abstract class pdfio_filter_e {
  /// No filter
  static const int PDFIO_FILTER_NONE = 0;

  /// ASCIIHexDecode filter (reading only)
  static const int PDFIO_FILTER_ASCIIHEX = 1;

  /// ASCII85Decode filter (reading only)
  static const int PDFIO_FILTER_ASCII85 = 2;

  /// CCITTFaxDecode filter
  static const int PDFIO_FILTER_CCITTFAX = 3;

  /// Encryption filter
  static const int PDFIO_FILTER_CRYPT = 4;

  /// DCTDecode (JPEG) filter
  static const int PDFIO_FILTER_DCT = 5;

  /// FlateDecode filter
  static const int PDFIO_FILTER_FLATE = 6;

  /// JBIG2Decode filter
  static const int PDFIO_FILTER_JBIG2 = 7;

  /// JPXDecode filter (reading only)
  static const int PDFIO_FILTER_JPX = 8;

  /// LZWDecode filter (reading only)
  static const int PDFIO_FILTER_LZW = 9;

  /// RunLengthDecode filter (reading only)
  static const int PDFIO_FILTER_RUNLENGTH = 10;
}

final class _pdfio_obj_s extends ffi.Opaque {}

/// Password callback for pdfioFileOpen
abstract class pdfio_permission_e {
  /// No permissions
  static const int PDFIO_PERMISSION_NONE = 0;

  /// PDF allows printing
  static const int PDFIO_PERMISSION_PRINT = 4;

  /// PDF allows modification
  static const int PDFIO_PERMISSION_MODIFY = 8;

  /// PDF allows copying
  static const int PDFIO_PERMISSION_COPY = 16;

  /// PDF allows annotation
  static const int PDFIO_PERMISSION_ANNOTATE = 32;

  /// PDF allows filling in forms
  static const int PDFIO_PERMISSION_FORMS = 256;

  /// PDF allows screen reading/accessibility (deprecated in PDF 2.0)
  static const int PDFIO_PERMISSION_READING = 512;

  /// PDF allows assembly (insert, delete, or rotate pages, add document outlines and thumbnails)
  static const int PDFIO_PERMISSION_ASSEMBLE = 1024;

  /// PDF allows high quality printing
  static const int PDFIO_PERMISSION_PRINT_HIGH = 2048;

  /// All permissions
  static const int PDFIO_PERMISSION_ALL = -1;
}

final class pdfio_rect_s extends ffi.Struct {
  /// Lower-left X coordinate
  @ffi.Double()
  external double x1;

  /// Lower-left Y coordinate
  @ffi.Double()
  external double y1;

  /// Upper-right X coordinate
  @ffi.Double()
  external double x2;

  /// Upper-right Y coordinate
  @ffi.Double()
  external double y2;
}

final class _pdfio_stream_s extends ffi.Opaque {}

/// Object data stream in PDF file
abstract class pdfio_valtype_e {
  /// No value, not set
  static const int PDFIO_VALTYPE_NONE = 0;

  /// Array
  static const int PDFIO_VALTYPE_ARRAY = 1;

  /// Binary data
  static const int PDFIO_VALTYPE_BINARY = 2;

  /// Boolean
  static const int PDFIO_VALTYPE_BOOLEAN = 3;

  /// Date/time
  static const int PDFIO_VALTYPE_DATE = 4;

  /// Dictionary
  static const int PDFIO_VALTYPE_DICT = 5;

  /// Indirect object (N G obj)
  static const int PDFIO_VALTYPE_INDIRECT = 6;

  /// Name
  static const int PDFIO_VALTYPE_NAME = 7;

  /// Null object
  static const int PDFIO_VALTYPE_NULL = 8;

  /// Number (integer or real)
  static const int PDFIO_VALTYPE_NUMBER = 9;

  /// String
  static const int PDFIO_VALTYPE_STRING = 10;
}

typedef pdfio_array_t = _pdfio_array_s;

/// Key/value dictionary
typedef bool = ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Int>)>;
typedef time_t = __time_t;
typedef __time_t = ffi.Long;

/// Array of PDF values
typedef pdfio_dict_t = _pdfio_dict_s;
typedef pdfio_obj_t = _pdfio_obj_s;

/// Dictionary iterator callback
typedef pdfio_file_t = _pdfio_file_s;
typedef pdfio_rect_t = pdfio_rect_s;

/// PDF file
typedef pdfio_error_cb_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(ffi.Pointer<pdfio_file_t>, ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Void>)>>;
typedef pdfio_output_cb_t = ffi.Pointer<
    ffi.NativeFunction<
        ssize_t Function(ffi.Pointer<ffi.Void> ctx, ffi.Pointer<ffi.Void> data,
            ffi.Int datalen)>>;
typedef ssize_t = __ssize_t;
typedef __ssize_t = ffi.Long;
typedef pdfio_stream_t = _pdfio_stream_s;
typedef pdfio_permission_t = ffi.Int;

/// Output callback for pdfioFileCreateOutput
typedef pdfio_password_cb_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Char> Function(
            ffi.Pointer<ffi.Void> data, ffi.Pointer<ffi.Char> filename)>>;

const String PDFIO_VERSION = '1.2.1';
